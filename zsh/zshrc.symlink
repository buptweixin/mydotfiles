#=== HELPER METHODS ===================================
function error() { print -P "%F{red}[ERROR]%f: %F{yellow}$1%f" && return 1 }
function info() { print -P "%F{blue}[INFO]%f: %F{cyan}$1%f"; }

export ZSH=$HOME/.dotfiles
# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# ZI_REPO='zdharma-continuum'
#=== ZINIT ============================================
typeset -gAH ZINIT;
ZINIT[HOME_DIR]=$HOME/.local/share/zsh/zinit  ZPFX=$ZINIT[HOME_DIR]/polaris
ZINIT[BIN_DIR]=$ZINIT[HOME_DIR]/zinit.git ZINIT[OPTIMIZE_OUT_DISK_ACCESSES]=1
ZINIT[COMPLETIONS_DIR]=$ZINIT[HOME_DIR]/completions ZINIT[SNIPPETS_DIR]=$ZINIT[HOME_DIR]/snippets
ZINIT[ZCOMPDUMP_PATH]=$ZINIT[HOME_DIR]/zcompdump    ZINIT[PLUGINS_DIR]=$ZINIT[HOME_DIR]/plugins
ZI_FORK='vladdoster'; ZI_REPO='zdharma-continuum'; GH_RAW_URL='https://raw.githubusercontent.com'
if [[ ! -e $ZINIT[BIN_DIR] ]]; then
  info 'downloading zinit' \
  && command mkdir -pv $ZINIT[HOME_DIR] \
  && command git clone \
    https://github.com/$ZI_REPO/zinit.git \
    $ZINIT[BIN_DIR] \
  || error 'failed to clone zinit repository' \
  && info 'setting up zinit' \
  && command chmod g-rwX $ZINIT[HOME_DIR] \
  && zcompile $ZINIT[BIN_DIR]/zinit.zsh \
  && info 'sucessfully installed zinit'
fi
if [[ -e $ZINIT[BIN_DIR]/zinit.zsh ]]; then
  source $ZINIT[BIN_DIR]/zinit.zsh \
    && autoload -Uz _zinit \
    && (( ${+_comps} )) \
    && _comps[zinit]=_zinit
else error "unable to find 'zinit.zsh'" && return 1
fi
#=== STATIC ZSH BINARY =======================================
zi for atpull"%atclone" depth"1" lucid nocompile nocompletions as"null" \
    atclone"./install -e no -d ~/.local" atinit"export PATH=$HOME/.local/bin:$PATH" \
  @romkatv/zsh-bin

#=== PROMPT ===========================================
if [[ $(uname) == "Darwin" ]]; then
    zinit lucid for \
        as"command" \
        from"gh-r" \
        atinit'export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"' atload'eval "$(starship init zsh)"' \
        starship/starship
elif [[ $(uname) == "Linux" ]]; then
    zinit lucid for \
        as"command" \
        from"gh-r" \
        bpick"*linux-musl*" \
        atinit'export N_PREFIX="$HOME/n"; [[ :$PATH: == *":$N_PREFIX/bin:"* ]] || PATH+=":$N_PREFIX/bin"' atload'eval "$(starship init zsh)"' \
        starship/starship
fi


#=== OH-MY-ZSH & PREZTO PLUGINS =======================
zinit for is-snippet \
  OMZL::{'clipboard','compfix','completion','git','grep','key-bindings'}.zsh \
  OMZP::brew \
  PZT::modules/{'history','rsync'}

#=== COMPLETIONS ======================================
local GH_RAW_URL='https://raw.githubusercontent.com'
install_completion(){ zinit for as'completion' nocompile id-as"$1" is-snippet "$GH_RAW_URL/$2"; }
install_completion 'brew-completion/_brew'     'Homebrew/brew/master/completions/zsh/_brew'
install_completion 'docker-completion/_docker' 'docker/cli/master/contrib/completion/zsh/_docker'
install_completion 'exa-completion/_exa'       'ogham/exa/master/completions/zsh/_exa'
install_completion 'fd-completion/_fd'         'sharkdp/fd/master/contrib/completion/_fd'
#=== zsh-vim-mode cursor configuration [[[
MODE_CURSOR_VICMD="green block";              MODE_CURSOR_VIINS="#20d08a blinking bar"
MODE_INDICATOR_REPLACE='%F{9}%F{1}REPLACE%f'; MODE_INDICATOR_VISUAL='%F{12}%F{4}VISUAL%f'
MODE_INDICATOR_VIINS='%F{15}%F{8}INSERT%f';   MODE_INDICATOR_VICMD='%F{10}%F{2}NORMAL%f'
MODE_INDICATOR_VLINE='%F{12}%F{4}V-LINE%f';   MODE_CURSOR_SEARCH="#ff00ff blinking underline"
setopt PROMPT_SUBST;  export KEYTIMEOUT=1 export LANG=en_US.UTF-8; export LC_ALL="en_US.UTF-8";
export LC_COLLATE='C' export LESS='-RMs'; export PAGER=less;       export VISUAL=vi
RPS1='${MODE_INDICATOR_PROMPT} ${vcs_info_msg_0_}'
#=== ANNEXES ==========================================
zinit light-mode for "$ZI_REPO"/zinit-annex-{'bin-gem-node','binary-symlink','patch-dl','submods'}

#=== GITHUB BINARIES ==================================
zinit from'gh-r' lbin'!' nocompile for \
  @dandavison/delta @sharkdp/hyperfine      \
  @koalaman/shellcheck @pemistahl/grex     \
  @r-darwish/topgrade           \
  lbin'!* -> shfmt'  @mvdan/sh           \
  lbin'!**/nvim' @neovim/neovim      \
  lbin'!**/rg'       @BurntSushi/ripgrep \
  lbin'!**/exa' atinit"
    alias ll='exa -al';
    alias l='exa -blF'; 
    alias la='exa -abghilmu';
    alias ls='exa --git --group-directories-first'" \
  @ogham/exa


if [[ $(uname) == "Darwin" ]]; then
    zinit ice as"command" from"gh-r" mv"fd* -> fd" pick"fd/fd"
    zinit light sharkdp/fd
elif [[ $(uname) == "Linux" ]]; then
    zinit ice as"command" from"gh-r" mv"fd* -> fd" pick"fd/fd" bpick"*linux-musl*"
    zinit light sharkdp/fd
fi

zinit \
    as'command' \
    atclone'mkdir -p $ZPFX/bin;
      cp -vf fzf $ZPFX/bin' \
    atpull'%atclone' \
    dl'https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.zsh -> _fzf_completion;
      https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh -> key-bindings.zsh;
      https://raw.githubusercontent.com/junegunn/fzf/master/man/man1/fzf-tmux.1 -> $ZPFX/man/man1/fzf-tmux.1;
      https://raw.githubusercontent.com/junegunn/fzf/master/man/man1/fzf.1 -> $ZPFX/man/man1/fzf.1' \
    from'gh-r' \
    id-as'junegunn/fzf' \
    lucid \
    nocompile \
    pick'$ZPFX/bin/fzf' \
    src'key-bindings.zsh' \
  for @junegunn/fzf

zinit as'command' light-mode for \
  pick'revolver' @molovo/revolver \
  pick'zunit' atclone'./build.zsh' @zunit-zsh/zunit
#=== MISC. ============================================
zinit light-mode for \
        atinit"bindkey -M vicmd '^e' edit-command-line" compile'zsh-vim-mode*.zsh' \
    softmoth/zsh-vim-mode \
        atpull'zinit creinstall -q .' blockf \
    zsh-users/zsh-completions \
        atload'_zsh_autosuggest_start' \
        atinit"
            ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=50
            bindkey '^_' autosuggest-execute
            bindkey '^y' autosuggest-accept" \
    zsh-users/zsh-autosuggestions \
        atclone'(){local f;cd -q â†’*;for f (*~*.zwc){zcompile -Uz -- ${f}};}' \
        atload'FAST_HIGHLIGHT[chroma-man]=' atpull'%atclone' \
        compile'.*fast*~*.zwc' nocompletions \
    $ZI_REPO/fast-syntax-highlighting \
    skywind3000/z.lua

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

